DB on EC2
    * Why we should run on ec2
        * Access to the instance OS
        * Advanced DB tuning option from DBROOT
        * Often the above are demanded by vendors
        * DB or DB version not provided by AWS
        * Very specfic version of DB or/and os version
        * replication not supported by AWS
    * Why we shouldn't
        * admin overhead
        * backup and DR management
        * EC2 is single AZ
        * Featues on AWS DB products are amazing
        * Replication
        * Performance

RDS
    * DB as a Service (DBaaS)
    * Managed DB instances
    * Multiple engines
    * Amazon aurora
    * Supports Aurora, MySQL, MariaDB, PostgreSQL, Oracle, Microsoft SQL Server
RDS DB instance
    * Database CNAME
    * Different types similar to ec2 instances
    * different SSD EBS similar to ec2
    * Types
        * Standard
        * Memory Optimised
        * Burstable performance
RDS MultiAZ
    * Primary and standby
    * SYNCHORNOUS
    * No free tier
    * both have their own storage
    * primary to secondary snychornous replication
    * RDS can be access by CNAME whic normally points to primary only
    * Process
        * Write data on primary 
        * primary writes data on disk
        * sync from priamry to secondary with almost no lag 
        * secondary writes data to disk
    * If primary fails cname is changed to secondary withing 120 seconds Usually
    * The primary DB instance switches over automatically to the standby replica if any of the following conditions occur:
       * An Availability Zone outage
       * The primary DB instance fails
       * The DB instanceâ€™s server type is changed
       * The operating system of the DB instance is undergoing software patching
       * A manual failover of the DB instance was initiated using Reboot with failover

------ Exam Power UP-------------
    * No free tier
    * standby cannot be accessed directly unless Failover. Availabilty not performance
    * High availabilty not fault tolerant
    * Backups taken from standby (No performance issue)
    * AZ outage, primary failover, instance type change
    * Synchornous - MultiAZ
--------------------------------------

RDS backup and restore
    * RTO and RPO
        * RPO - Recovery point objective
            * RPO refers to the maximum acceptable amount of data loss an application can undergo before causing measurable harm to the business.
            * time between last backup and the incident
            * amount of maximum data loss
            * influences solution and cost. Lower value more cost
        * RTO 
            * RTO states how much downtime an application experiences before there is a measurable business loss     
            * time between DR event to full Recovery
            * low values cost more
    * both backups and Snapshots are taken in s3 and invisible to the customer
    * Both backups and snapshots are incremental
    * automated backups
        * defined backup window
        * the above defines RPO
        * automated snapshots
        * every five minutes db transaction logs are stored in s3
        * deleted automatically based on retention period
    * manual snapshots
        * snapshots are not deleted
        * regualr snapshots less RPO
        * manual snapshots are not deleted automatically

----- Exam powerup-------------
    * Create new RDS instance - new address restore
    * snapshot to restore in a specifc point in time RPO would be affected
    * automatic backups have transaction logs can restore before 5 minutes from the distaster . Better RPO
    * Restores aren't fast - might affect RTO
-------------------------------
RDS REAd repplicas
    * read only replicas of the instances    
    * ASYNCHORNOUS. a little lag
    * coupled with Multi-AZ refer learning aids
    * cross region (enc in transit)
    * Performance
        * 5 X per RDS DB instacnes. ONLY %
        * couple along with standby
        * Read replicas can have read replicas but will be laggy
        * Global performance improvements
    * availiility
        * improve RPO. Near 0 RPO
        * RTO is still Problem. Convert RR to RW and reduce the RTO
        * Gloabl availabiltiy
    * corrupted data would be replicated

Amazon RDS security
    * You can only enable encryption for an Amazon RDS DB i nstance when you create i t, not after the DB i nstance i s
      created
    * SSL/TLS (in transit) is available, can be mandotory
    * EBS volume encryption
    * Handled by Host and EBS. DB engine is unware of it
    * storage, logs and replicas are enc
    * MSSQL and Oracle support TDE (Transparent data encryption)
        * Encryption by db engine
        * RDS Oracle supports CloudHSM
    * IAM user Notification
        * Local users on the db can be created with AWS auth token
        * A Policy can be attached to IAM user or role or to instance role
        * The principal gets a token to access the RDS DB valid for 15 minutes
        * Its only used for authentication(login) and not authorizaton (permissions in DB, taken care by local db user)

Amazon aurora architecture
    * VERY diff from RDS
    * MYSQL and PSQL
    * Uses a Cluster
    * Primary + 0 or more replicas (upto 15 replicas)
    * No local storage shared cluster volume (6 replicas across diff AZ)
        * High OPS , low latency
        * No minimum size similar to EFS . Billed on consumption
        * High water mark billing model
    * Only primary can wrtie others can be read  
    * No free tier
    * 100% DB size backup
    * backup as similar to RDS
    * restore creates a new cluster
    * Backtrack canbe used to allow in place rewinds to a previous point of time
    * Fast clone make a new db much fast . It references the original storage and only diff aare stored
    * Millisecond latency
aurora serverless
    * Scalable ACU - Aurora Capacity Units
        * Allocated from a pool of ACUs 
        * ACU can be allocated 
        * ACU is stateless and shared among customers
        * No local storage
        * Can be allocate rapidly when required
        * ACU can be dynamically increased or decreased based on load
    * Ability to define min and max
    * Cluster adjusts based on load
    * can go to 0 and be paused
    * consumption billing per second
    * Managing connections
        * Shared proxy fleet (refer learning aids)
        * These manage the connections
        * The underlying compute is not aware of it make the scale out or scale on more fluid
    * Use cases
        * Infrequently used appliations
        * New applications unsure of the load and resources
        * Variable wokrlaods
Aurora GLobal Database
    * Global level replication
    * Under a second latency
    * NO automatic failover
    * 5 secondary REGIONS
    * replication is between 1s from primary to secondary
    * Use cases
        * cross region DR
        * Global read scaling
Aurora Multi-Master
    * All instances are by default in R/W
    * Application connects directly to the ACU
    * No proxy fleet
    * Fault tolerant

Database Migration Service
    * Managed service
    * migrate DB from one to another using a replication instance inbetween
    * Runs using a replication instance
    * Source and destination end points
    * One end point must be in AWS
    * Can be migrated in two ways
        * Full data - source db needs to be offline for no delta afterwards
        * Full data + CDC (change data capture) - Copies the entire db while copying stores the CDC and once copied the full db , copies the CDC as well
            * No source db need to be offline

