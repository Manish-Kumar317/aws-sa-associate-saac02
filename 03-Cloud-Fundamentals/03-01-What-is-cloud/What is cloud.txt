Five principles
 * On demand self service - Create reosurces or services using any manual intervention from the cloud providor
 * Broad Network Access - Should be able to access the service over the network using standard protocols
 * Resource Pooling - Serving multiple tenants from the same hardware. End user not being aware of exact location of Resource
 * Elasticity - Ability to scale out or scale in automatically based on the load
 * Measured Service - Pay as you use

 Public cloud - Which is available to public as AWS, GCP and Azure
 Private cloud - Cloud which is dedicated to a specific client. 
                 Legacy on-premesis is NOT PRIVATE cloud as its not true to the above principles
 Multi cloud - Use of one or more cloud
 Hybrid cloud - Use of PRivate and public cloud from the same vendor as AWS and AWS outposts

 IAAS - Manage O/S EC2
 PAAS - Manage runtime lambda
 SAAS - Manage software elasticsearch

 OSI Model
    * Physical layer - cables,optic fibre or Wi-Fi
    * DataLink layer 
        * Contains the source and destination MAC address (Unique way of understanding the NIC)
        * Carrier checks is used for data collision. It check whether any data is also sent by receving end
        * Device to Device over local network
    * Network layer - 
        * Cross network addressing
        * Source and Destination IP address
        * ARP - For a given DEst IP it will automatically get its MAC address by broadcasting
        * Device to Device comm over internet
        * packet delivery is not reliable
    * Transport layer
        * TCP - Connection based protocol. SLow but reliable. Packed will be in sequence
        * UDP - Connectionless protocol. Fast but unreliable
        * Diff b/w TCP and UDP - https://www.lifesize.com/en/blog/tcp-vs-udp/
    * Session layer
        * Manages the establishment, maintenance, and termination of communication sessions between devices
    * Presentation layer
        * The Presentation Layer handles data translation, encryption, and compression. 
        * It ensures that data sent by one application is readable and usable by another, regardless of differences in data formats or character sets.
    * Application Layer
        * The Application Layer is the topmost layer and provides application services directly to end-users. It encompasses a wide range of network services, including email, web browsing, and file transfer. 
        * Common application layer protocols include HTTP, SMTP, and FTP

Physical Layer - 
    This layer is like the very first step of a postman's job. 
    Just as the physical layer deals with the physical transmission of data, the postman's job begins with physically collecting letters and packages from a mailbox or post office. 
    It's all about the tangible items.

Data Link Layer - 
    In the OSI model, this layer ensures data integrity and helps organize data into frames.
    In a postman's world, this is similar to sorting and categorizing the collected mail and packages into groups. 
    It ensures that everything is labeled correctly and ready for delivery.

Network Layer - 
    This is like the layer of organization above the postman. 
    It decides the best routes for mail delivery, just as a postal service or city planner determines the most efficient routes for the postman to follow. 
    It manages the flow of mail in a broader sense.

Transport Layer - 
    In terms of postal work, this layer ensures that packages and letters are transported securely and efficiently. 
    It's similar to how a postman carefully places mail into the mailbag or mail truck, ensuring that items are delivered in the correct order and without damage.

Session Layer - 
    This layer corresponds to the postman's ability to manage the interaction between different senders and receivers. 
    For example, if there's a need to collect a signature upon delivery, the postman acts as the "session" manager, facilitating this interaction.

Presentation Layer - 
    In the OSI model, this layer deals with how data is presented to the user. 
    For a postman, it might relate to the way mail is presented and packaged. 
    This includes making sure mail is in good condition, neatly organized, and easy for the recipient to understand and open.

Application Layer - 
    This layer is all about the services and applications in a network. 
    In the postman's world, it's like the various services the postal service offers, such as express mail, registered mail, or special delivery options. 
    The postman is the one who makes these services available to customers.

In summary, the OSI model can be likened to the tasks and processes a postman goes through when delivering mail. Each layer plays a role in ensuring the smooth, reliable, and efficient delivery of letters and packages, from physically collecting them to providing specialized services to customers

Network Address Transalation (NAT)
    * STATIC NAT (AWS IGW)
        * Each private device gets its own fixed public IP by the NAT device
        * Traffic from the private device intended for the internet get its source IP modified to NAT Public IP
        * Traffice sent back to this public IP to the private network device get its dest modified to private ip by NAT
    * Dynamics NAT
        * THe private device gets a random temp piblic IP available from the pool by the NAT device
        * When traffic is requested for the internet a public IP is attached for the duartion of the request
        * Might run into unavailability of Public IP during concurrent traffic by private devices
    * PAT (AWS NATGW)
        * All the private devices get mapped to a single NAT public IP
        * When a request from a private Ip is sent to internet
            * NAT device / Router will attach the public IP and a new source port
            * When the reponse is recieved by router it will look in its NAT table with the source port 
                and route it to the original private IP
IPv4 Address Space - https://www.iana.org/
    * Class A 
        * 0.0.0.0 - 127.255.255.255
        * Private Range - 10.0.0.0 - 10.255.255.255
        * Very big org
    * Class b
        * 128.0.0.0 - 191.255.255.255
        * Private Range - 172.16.0.0 - 172.31.255.255
    * Class C
        * 192.0.0.0 - 255.255.255.255
        * 192.168.0.0 - 193.168.255.255 (Private range)
        * small business
SSL / TLS (Scenario only for Server identification)
    * Server Prerequesites
        * Create a public / private key pair
        * Create a CSR with encrypted public key
        * Ask CA to sign the CSR
        * The CA signs the CSR by encrypting with its private key and provide public certificate
        * The CA's public key is then made available to the OS or by the browser as trusted CA or root CA
    * TLS negotiation Steps are performed after a TCP handshake
    * Cipher Suites ((Asymmetric))
        * The client sends metadata such as TLS version,Session Id,Cipher suite
        * If the cipher suites is supported by the server, only then server will repsond
            * TLS version, SessionId , Cipher suite
            * Public certificate which contains the public key
    * Authentication (Asymmetric)
        * The client verifies for valid CA from its truststore or root CA
        * The client validates the certificate for its date and DNS
        * It then decrypts the Public certificate using the CA's public key and gets the server's public key
        * It sends a random message to server encrypted with the server's public key
        * Server decrypts the encrypted random message by its own private key and confirms it to the client
    * Key exchange (Asym to symmetric)
        * The client send pre-master key to the server by encrypting it using server's public key
        * The server decrypts the pre-master key using its private key
        * Now both the client and server have same master secret which is valid for the lifetime of the Connection
        * Now using this master secret they can generate session keys to encrypt and decrypt data
        * both side confirm the handshake and now the connection b/w server and client is encrypted
        * At this stage the encryption becomes asym to symmetric and reduce computtional overhead required for asym